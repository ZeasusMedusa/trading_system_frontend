version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: smiio_postgres_prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-smiio_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Must be set in .env
      POSTGRES_DB: ${POSTGRES_DB:-smiio_backtest}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - smiio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-smiio_user} -d ${POSTGRES_DB:-smiio_backtest}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for job queue and caching
  redis:
    image: redis:7-alpine
    container_name: smiio_redis_prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}  # Must be set in .env
    volumes:
      - redis_data:/data
    networks:
      - smiio_network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend (Python FastAPI)
  backend:
    build:
      context: ../smiio-backend
      dockerfile: Dockerfile.prod
    container_name: smiio_backend_prod
    restart: always
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-smiio_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-smiio_backtest}
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      # JWT
      SECRET_KEY: ${SECRET_KEY}  # Must be set in .env
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-10080}
      # API
      API_HOST: 0.0.0.0
      API_PORT: 8000
      # Production settings
      WORKERS: ${WORKERS:-4}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smiio_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: smiio_frontend_prod
    restart: always
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NODE_ENV: production
    depends_on:
      - backend
    networks:
      - smiio_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smiio_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL certificates
      - nginx_cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - smiio_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  smiio_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  nginx_cache:

